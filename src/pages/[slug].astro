---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro'
import { getCollection } from 'astro:content'
import Layout from '../layouts/Layout.astro'
import { Image } from 'astro:assets'
import appleMusicIconImage from '../assets/images/icons/apple-music.webp'
import spotifyIconImage from '../assets/images/icons/spotify.webp'
import UsefulVideos from '../components/UsefulVideos.astro'

export const getStaticPaths = (async () => {
  const tabs = await getCollection('tabs')

  return tabs.map((tab) => ({
    params: { slug: tab.slug },
    props: tab,
  }))
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const tab = Astro.props as Props
const data = tab.data
const { Content } = await tab.render()

function formatNumberWithOrdinalSuffix(value: number): string {
  const suffix = ['th', 'st', 'nd', 'rd']
  const units = value % 100
  return value + (suffix[(units - 20) % 10] ?? suffix[units] ?? suffix[0])
}
---

<Layout title={`${data.title} - Tino's Tabs`}>
  {/* TODO a way to get to the index/home page */}
  <div class="mb-8 flex flex-col items-center gap-4">
    <div
      class="relative rounded-md shadow-2xl after:absolute after:inset-0 after:rounded-md after:ring-1 after:ring-inset after:ring-black/10 after:content-['']"
    >
      <Image
        src={data.albumImageURL}
        alt="Album Cover"
        class="h-4w-44 w-44 rounded-md"
      />
    </div>
    <div class="flex flex-col items-center">
      <h1 class="text-2xl font-semibold">{data.title}</h1>
      <div class="text-stone-500">{`${data.album} â€¢ ${data.artist}`}</div>
    </div>
    <div
      class="flex divide-x self-stretch rounded-md bg-stone-50 p-1.5 text-sm"
    >
      <div class="flex-1 text-center text-stone-500">
        Tuning <span class="font-medium text-stone-900">{data.tuning}</span>
      </div>
      <div class="flex-1 text-center text-stone-500">
        Capo <span class="font-medium text-stone-900"
          >{
            data.capo
              ? `${formatNumberWithOrdinalSuffix(data.capo)} fret`
              : 'None'
          }</span
        >
      </div>
    </div>
    <div class="flex gap-3 self-stretch">
      <a
        href={data.spotifyURL}
        target="_blank"
        class="flex flex-1 items-center justify-center gap-2 rounded-full border border-stone-300 px-2 py-1 text-center font-medium text-stone-500 shadow-[0_1px_0_theme(colors.stone.300),0_2px_2px_0_rgb(0_0_0_/_0.05)] transition-all hover:bg-stone-50 active:translate-y-[1px] active:bg-stone-50 active:shadow-none"
      >
        <span>
          Play on <span class="hidden sm:inline">Spotify</span>
        </span>
        <span
          class="relative rounded after:absolute after:inset-0 after:rounded after:ring-1 after:ring-inset after:ring-black/10 after:content-['']"
        >
          <Image src={spotifyIconImage} alt="Spotify" class="h-5 w-5 rounded" />
        </span>
      </a>
      <a
        href={data.appleMusicURL}
        target="_blank"
        class="flex flex-1 items-center justify-center gap-2 rounded-full border border-stone-300 px-2 py-1 text-center font-medium text-stone-500 shadow-[0_1px_0_theme(colors.stone.300),0_2px_2px_0_rgb(0_0_0_/_0.05)] transition-all hover:bg-stone-50 active:translate-y-[1px] active:bg-stone-50 active:shadow-none"
      >
        <span>
          Play on <span class="hidden sm:inline">Apple Music</span>
        </span>
        <span
          class="relative rounded after:absolute after:inset-0 after:rounded after:ring-1 after:ring-inset after:ring-black/10 after:content-['']"
        >
          <Image
            src={appleMusicIconImage}
            alt="Apple Music"
            class="h-5 w-5 rounded"
          />
        </span>
      </a>
    </div>
  </div>

  {
    data.videoIDs && data.videoIDs.length > 0 && (
      <>
        <h2>Useful Videos</h2>
        <UsefulVideos
          videoIDs={data.videoIDs}
          searchQuery={`${data.title} ${data.artist}`}
        />
      </>
    )
  }

  <Content />
  {/* TODO feedback */}
</Layout>

<style>
  :global(h2) {
    @apply mb-4 mt-6 text-lg font-semibold;
  }

  :global(p) {
    @apply my-4;
  }

  :global(pre) {
    @apply -mx-5 my-4 overflow-auto border-y border-stone-100 bg-stone-50 px-5 py-4 text-sm text-stone-600;
    @apply md:mx-0 md:rounded-lg md:border;
  }

  :global(:not(pre) > code) {
    @apply rounded border border-stone-100 bg-stone-50 px-1 text-sm text-stone-600;
  }
</style>
